{"version":3,"sources":["components/PersonForm.js","components/Person.js","components/PersonList.js","components/FilterForm.js","components/Notification.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["PersonForm","persons","addPerson","useState","newName","setNewName","newNumber","setNewNumber","onSubmit","event","preventDefault","name","number","then","value","onChange","target","type","Person","person","removePerson","onClick","id","PersonList","filter","filtered_persons","toLowerCase","includes","map","key","FilterForm","setFilter","Notification","notification","setNotification","duration","hasOwnProperty","setTimeout","style","success","color","background","fontSize","borderRadius","padding","marginBottom","error","status","message","baseUrl","axios","get","response","data","newObject","post","put","delete","App","setPersons","statusMessage","setStatusMessage","useEffect","personService","initialPersons","newPerson","matchingPerson","find","undefined","returnedPerson","concat","msg","window","confirm","updatedPerson","catch","personName","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.8956069b.chunk.js","sourcesContent":["import React, { useState }from 'react'\r\n\r\nconst PersonForm = ({persons, addPerson}) => {\r\n    const [ newName, setNewName ] = useState('')\r\n    const [ newNumber, setNewNumber] = useState('')\r\n  \r\n    const handleAddPerson = event => {\r\n      event.preventDefault()\r\n      /*\r\n      if (persons.some(person => person.name === newName)){\r\n        window.alert(`${newName} is already added to phonebook`)\r\n        return\r\n      }\r\n      */\r\n      const newperson = {\r\n        name: newName,\r\n        number: newNumber,\r\n      }\r\n      addPerson(newperson)\r\n      .then( () => {\r\n        setNewName('')\r\n        setNewNumber('')\r\n      })\r\n    }\r\n\r\n    const handleNameChange = event => {\r\n        setNewName(event.target.value)\r\n    }\r\n    \r\n    const handleNumberChange = event => {\r\n        setNewNumber(event.target.value)\r\n    }\r\n\r\n    return(\r\n    <form onSubmit={handleAddPerson}>\r\n        <div>\r\n        name: <input value={newName} onChange={handleNameChange}/>\r\n        </div>\r\n        <div>\r\n        number: <input value={newNumber} onChange={handleNumberChange}/>\r\n        </div>\r\n        <div>\r\n        <button type=\"submit\">add</button>\r\n        </div>\r\n    </form>\r\n    )\r\n}\r\n\r\nexport default PersonForm","import React from 'react'\r\n\r\nconst Person = ({person, removePerson}) => {\r\n  return(\r\n    <div>\r\n      {person.name} {person.number}\r\n      <button onClick={() => removePerson(person.id)}>delete</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Person","import React from 'react'\r\nimport Person from './Person'\r\n\r\nconst PersonList = ({persons, filter, removePerson}) => {\r\n  const filtered_persons = persons.filter( person => \r\n    person.name.toLowerCase().includes(filter.toLowerCase())\r\n  )\r\n  return (\r\n    <ul>\r\n      {filtered_persons.map(person => <Person key={person.name} person={person} removePerson={removePerson}/>)}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default PersonList\r\n","import React from 'react'\r\n\r\nconst FilterForm = ({filter, setFilter}) => {\r\n    const handleFilterChange = event => {\r\n      setFilter(event.target.value)\r\n    }\r\n    return(\r\n      <>\r\n      Filter name\r\n      <input value={filter} onChange={handleFilterChange}/>\r\n      </>\r\n    )\r\n}\r\n\r\nexport default FilterForm\r\n","import React from 'react'\r\n\r\nconst Notification = ({notification, setNotification}) => {\r\n    const styles = {\r\n        success: {\r\n            color: 'green',\r\n            background: 'lightgreen',\r\n            fontSize: 20,\r\n            borderRadius: 5,\r\n            padding: 10,\r\n            marginBottom: 10\r\n        },\r\n        error: {\r\n            color: 'red',\r\n            background: 'pink',\r\n            fontSize: 20,\r\n            borderRadius: 5,\r\n            padding: 10,\r\n            marginBottom: 10\r\n        }\r\n    }\r\n\r\n    if (notification === null){\r\n        return null\r\n    }\r\n\r\n    const duration = notification.hasOwnProperty('duration') ? notification.duration : 5000\r\n\r\n    setTimeout(() => {\r\n        setNotification(null)\r\n    }, duration)\r\n    return (\r\n        <div style={styles[notification.status]}>\r\n            {notification.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification\r\n","import axios from 'axios'\r\nconst baseUrl = 'http://localhost:3001/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n    return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nexport default {\r\n    getAll,\r\n    create,\r\n    update,\r\n    remove\r\n}","import React, { useState, useEffect }from 'react'\nimport PersonForm from './components/PersonForm'\nimport PersonList from './components/PersonList'\nimport FilterForm from './components/FilterForm'\nimport Notification from './components/Notification'\nimport personService from './services/persons'\n\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ filter, setFilter] = useState('')\n  const [ statusMessage, setStatusMessage] = useState(null)\n\n  const addPerson = newPerson => {\n    const matchingPerson = persons.find(person => person.name === newPerson.name)\n    if (matchingPerson !== undefined){\n      const msg = `${newPerson.name} is already added to phonebook replace the old number with a new one?`\n      if (window.confirm(msg)){\n        return(\n          personService\n            .update(matchingPerson.id, newPerson)\n            .then(updatedPerson => {\n              setPersons(persons.map(person => person.id !== matchingPerson.id ? person : updatedPerson))\n              setStatusMessage({status: 'success', message: `Succesfully updated number for ${matchingPerson.name}`})\n            })\n            .catch(error => {\n              setStatusMessage({status: 'error', message: `Updating ${matchingPerson.name} failed,\n                              probably removed from the server`})\n            })\n        )\n      }\n    }\n    else{\n      // Return promise so that the caller can chain onto it and perform its own actions\n      return(\n        personService\n        .create(newPerson)\n        .then(returnedPerson => {\n            setPersons(persons.concat(returnedPerson))\n            setStatusMessage({status: 'success', message: `Succesfully added number for ${returnedPerson.name}`})\n        })\n      )\n    }\n  }\n\n  const removePerson = id => {\n    const personName = persons.find(person => person.id === id).name\n    if (window.confirm(`Delete ${personName}?`)){\n      personService\n        .remove(id)\n        .then(() => {\n          setPersons(persons.filter(person => person.id !== id))\n          setStatusMessage({status: 'success', message: `Deleted ${personName}`})\n        })\n        .catch(error => {\n          setStatusMessage({status: 'error', message: `Deleting ${personName} failed,\n                          probably already removed from the server`})\n        })\n      }\n  }\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  return ( \n    <div>\n      <h2>Phonebook</h2>\n      <Notification notification={statusMessage} setNotification={setStatusMessage}/>\n      <FilterForm filter={filter} setFilter={setFilter}/>\n      <h2>Add new number</h2>\n      <PersonForm persons={persons} addPerson={addPerson}/>\n      <h2>Numbers</h2>\n      <PersonList persons={persons} filter={filter} removePerson={removePerson}/>\n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}